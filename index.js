const Manager = require("./lib/Manager");
const Engineer = require("./lib/Engineer");
const Intern = require("./lib/Intern");
const inquirer = require("inquirer");
const path = require("path");
const fs = require("fs");
const Questions = require("./lib/Questions")

const OUTPUT_DIR = path.resolve(__dirname, "output");
const outputPath = path.join(OUTPUT_DIR, "team.html");

const render = require("./src/page-template.js");

// Initialise an empty array to store all the employees generated by the prompts
const employees = [];

// A function to create the team members
// Uses inquirer to ask the user if they want to enter an engineer, intern or complete the process.
function createTeam() {

    // Create a new Questions object
    const questions = new Questions();

    /* The prompt is taking an array of objects (questions).
       An array of questions is returned by the function
       questions.getTeamQuestions().
    */
    inquirer
        .prompt(questions.getTeamQuestions())

        // When the user finishes answering the questions, proceed with the response data returned 
        .then((response) => {

            // Assign user choice to a variable
            const choice = response.choices;

            // If the user selects engineer, call the createEngineer() function
            if (choice === 'Engineer') {

                createEngineer();

                // If the user selects Intern, call the createIntern() function
            } else if (choice === 'Intern') {

                createIntern();

                // If the user selects to finish, call the createHtmlFile() function
            } else {

                createHtmlFile();
            }
        }
        );
}

// function to create an engineer
function createEngineer() {

    /* Create a new Questions object with 'engineer' parameter. 
       The 'engineer' parameter will be used to generate questions specifically for an engineer role.
    */
    const questions = new Questions('engineer');

    /* The prompt is taking an array of objects (questions).
       An array of questions is returned by the function
       questions.getEmployeeQuestions().
    */
    inquirer
        .prompt(questions.getEmployeeQuestions())

        // When the user finishes answering the questions, proceed with the response data returned 
        .then((response) => {
            // Create a new Engineer object based on the Engineer class
            const engineer = new Engineer(response.name, response.id, response.email, response.github);

            // Push the Engineer to the employees array
            employees.push(engineer);

            // Show the next prompt for adding additional employees
            createTeam();
        }
        );
}

// function to create an intern
function createIntern() {

    /* Create a new Questions object with 'intern' parameter. 
       The 'intern' parameter will be used to generate questions specifically for an intern role.
    */
    const questions = new Questions('intern');

    /* The prompt is taking an array of objects (questions).
       An array of questions is returned by the function
       questions.getEmployeeQuestions().
    */
    inquirer
        .prompt(questions.getEmployeeQuestions())

        // When the user finishes answering the questions, proceed with the response data returned 
        .then((response) => {
            // Create a new Intern object based on the Intern class
            const intern = new Intern(response.name, response.id, response.email, response.school);

            // Push the Intern to the employees array
            employees.push(intern);

            // Show the next prompt for adding additional employees
            createTeam();
        }
        );
}

// function to create a manager
function createManager() {

    const managerQuestions = new Questions('manager');

    /* The prompt is taking an array of objects (questions).
       An array of questions is returned by the function
       questions.getEmployeeQuestions().
    */
    inquirer
        .prompt(managerQuestions.getEmployeeQuestions())

        // When the user finishes answering the questions, proceed with the response data returned 
        .then((response) => {
            // Create a new manager object based on the Manager class
            const manager = new Manager(response.name, response.id, response.email, response.officeNumber);

            // Push the manager to the employees array
            employees.push(manager);

            // Show the next prompt for adding additional employees
            createTeam();
        }
        );
}

// function to write html file
function createHtmlFile() {

    const html = render(employees);

    // Ise the writeFile() method of the fs module to write the file with data
    fs.writeFile(outputPath, html, (error) =>

        // Upon the call back (success or failure), display the result to the user
        // An error is displayed if theres an issue
        // If successful, the file name is displayed to the user
        error ? console.error(error) : console.log(`${outputPath} created successfully!`)
    )
}


// Init function called when app runs
function init() {

    // call the createManager() function (first prompt in the app)
    createManager();
}

// call init() function.
init();